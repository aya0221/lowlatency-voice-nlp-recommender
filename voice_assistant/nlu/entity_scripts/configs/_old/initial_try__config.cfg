[paths]
train = "voice_assistant/data/entity_data/train.spacy"
dev = "voice_assistant/data/entity_data/dev.spacy"
vectors = null
init_tok2vec = null


[nlp]
lang = "en"
pipeline = ["transformer", "ner"]
batch_size = 128

[components]

[components.transformer]
factory = "transformer"
max_batch_items = 4096

[components.transformer.model]
@architectures = "spacy-transformers.TransformerModel.v3"
name = "roberta-base" 
tokenizer_config = {"use_fast": true}

[components.transformer.model.get_spans]
@span_getters = "spacy-transformers.doc_spans.v1"

[components.ner]
factory = "ner"

[components.ner.model]
@architectures = "spacy.TransitionBasedParser.v2"
state_type = "ner"
extra_state_tokens = false
hidden_width = 64
maxout_pieces = 2
use_upper = false
nO = null

[components.ner.model.tok2vec]
@architectures = "spacy-transformers.TransformerListener.v1"
upstream = "transformer"
pooling = {"@layers": "reduce_mean.v1"}
grad_factor = 1.0

[corpora]

[corpora.train]
@readers = "spacy.Corpus.v1"
path = ${paths.train}

[corpora.dev]
@readers = "spacy.Corpus.v1"
path = ${paths.dev}

[training]
train_corpus = "corpora.train"
dev_corpus = "corpora.dev"
optimizer = {"@optimizers": "Adam.v1"}
dropout = 0.1
accumulate_gradient = 1
patience = 1600
max_epochs = 15
eval_frequency = 200
grad_norm_clip = 1.0
weight_decay = 0.01
learning_rate = 0.00005
score_weights = {"ents_f": 1.0}
seed = 42
gpu_allocator = "pytorch"

[training.batcher]
@batchers = "spacy.batch_by_words.v1"
discard_oversize = true
tolerance = 0.2
get_length = null
size = 2000

[training.logger]
@loggers = "spacy.ConsoleLogger.v1"

[initialize]
[initialize.components]
[initialize.components.ner]
labels = ["WORKOUT_TYPE", "DURATION", "INTENSITY", "GOAL", "MOOD", "INSTRUCTOR"]
